{
  "address": "0xa40CDB7595fb14F932F56EaA6Aa00E5062B8aa08",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dtecAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lockerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CantBuy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OverUnderAllowedAmt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS_TO_BUY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_BUY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_mods",
          "type": "address[]"
        }
      ],
      "name": "addMods",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_wallets",
          "type": "address[]"
        }
      ],
      "name": "addWLs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToBoughtAmt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_preferUSDC",
          "type": "bool"
        }
      ],
      "name": "allocateTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allocations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountSold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_preferUSDC",
          "type": "bool"
        }
      ],
      "name": "buyTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimAllocation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dtecTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amt",
          "type": "uint256"
        }
      ],
      "name": "getBuyCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "immediateReleaseRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amt",
          "type": "uint256"
        }
      ],
      "name": "pullTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "salePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "setImmediateReleaseRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "setPaymentReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "setSalePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdt",
          "type": "address"
        }
      ],
      "name": "setStableAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "togglePause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "wl",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4a433ac02458b9065429124b1a16d1168ccff305ee6588a686df7b8c9ea93048",
  "receipt": {
    "to": null,
    "from": "0xdAB41BaCF8b809E8A48cc3e830d7FCDaf05C26d5",
    "contractAddress": "0xa40CDB7595fb14F932F56EaA6Aa00E5062B8aa08",
    "transactionIndex": 31,
    "gasUsed": "2490240",
    "logsBloom": "0x
    "blockHash": "0x67901218d8612ea651291d64bb7906fc891dfe23709b8693669c527ff61357d4",
    "transactionHash": "0x4a433ac02458b9065429124b1a16d1168ccff305ee6588a686df7b8c9ea93048",
    "logs": [
      {
        "transactionIndex": 31,
        "blockNumber": 47680128,
        "transactionHash": "0x4a433ac02458b9065429124b1a16d1168ccff305ee6588a686df7b8c9ea93048",
        "address": "0xa40CDB7595fb14F932F56EaA6Aa00E5062B8aa08",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dab41bacf8b809e8a48cc3e830d7fcdaf05c26d5"
        ],
        "data": "0x",
        "logIndex": 206,
        "blockHash": "0x67901218d8612ea651291d64bb7906fc891dfe23709b8693669c527ff61357d4"
      },
      {
        "transactionIndex": 31,
        "blockNumber": 47680128,
        "transactionHash": "0x4a433ac02458b9065429124b1a16d1168ccff305ee6588a686df7b8c9ea93048",
        "address": "0xa40CDB7595fb14F932F56EaA6Aa00E5062B8aa08",
        "topics": [
          "0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258"
        ],
        "data": "0x000000000000000000000000dab41bacf8b809e8a48cc3e830d7fcdaf05c26d5",
        "logIndex": 207,
        "blockHash": "0x67901218d8612ea651291d64bb7906fc891dfe23709b8693669c527ff61357d4"
      },
      {
        "transactionIndex": 31,
        "blockNumber": 47680128,
        "transactionHash": "0x4a433ac02458b9065429124b1a16d1168ccff305ee6588a686df7b8c9ea93048",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000dab41bacf8b809e8a48cc3e830d7fcdaf05c26d5",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002031a1bd6958d80000000000000000000000000000000000000000000000002bd23c45f363baf3100000000000000000000000000000000000000000000144db45ffb16d1cb9601000000000000000000000000000000000000000000000002bb20aa435fa621b100000000000000000000000000000000000000000000144db6631532a8612381",
        "logIndex": 208,
        "blockHash": "0x67901218d8612ea651291d64bb7906fc891dfe23709b8693669c527ff61357d4"
      }
    ],
    "blockNumber": 47680128,
    "cumulativeGasUsed": "7209241",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDCbA1401ce2f323e5e1A11f35A7787323e078b64",
    "0xE8F6408a38b2Fbfc4Cf072ecC6efE195476bf883",
    "0xB4754EdB866A05Ac7cC1B9BFaEfA900707c1a76d"
  ],
  "numDeployments": 1,
  "solcInputHash": "9b5880265a87cdaccb37bbff136bc4c6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dtecAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lockerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CantBuy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OverUnderAllowedAmt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_TO_BUY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_BUY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_mods\",\"type\":\"address[]\"}],\"name\":\"addMods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wallets\",\"type\":\"address[]\"}],\"name\":\"addWLs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToBoughtAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_preferUSDC\",\"type\":\"bool\"}],\"name\":\"allocateTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_preferUSDC\",\"type\":\"bool\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dtecTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"getBuyCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"immediateReleaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"pullTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setImmediateReleaseRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setPaymentReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"}],\"name\":\"setStableAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wl\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DTECPrivateSale.sol\":\"DTECPrivateSale\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/DTECPrivateSale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {DTECTokenSale} from './DTECTokenSale.sol';\\n\\ncontract DTECPrivateSale is DTECTokenSale {\\n    uint256 public constant MIN_TOKENS_TO_BUY = 71428;\\n    uint256 public constant MAX_TOKENS_TO_BUY = 1428572;\\n\\n    mapping(address => uint8) public wl;\\n    mapping(address => uint256) public addressToBoughtAmt;\\n\\n    error Unauthorized();\\n    error OverUnderAllowedAmt();\\n\\n    constructor(address _receiver, address _dtecAddress, address _lockerAddress) DTECTokenSale(_receiver, _dtecAddress, _lockerAddress) {\\n        setImmediateReleaseRate(200);\\n        setSalePrice(0.07 ether);\\n    }\\n\\n    function addWLs(address[] calldata _wallets) external {\\n        if (!isMod(msg.sender)) {\\n            revert Unauthorized();\\n        }\\n        for (uint256 i = 0; i < _wallets.length; i++) {\\n            wl[_wallets[i]] = 1;\\n        }\\n    }\\n\\n    function buyTokens(uint256 _amt, bool _preferUSDC) external override nonReentrant {\\n        if (wl[msg.sender] != 1) {\\n            revert CantBuy();\\n        }\\n        if (_amt < MIN_TOKENS_TO_BUY) {\\n            revert OverUnderAllowedAmt();\\n        }\\n        addressToBoughtAmt[msg.sender] = addressToBoughtAmt[msg.sender] + _amt;\\n        if (addressToBoughtAmt[msg.sender] > MAX_TOKENS_TO_BUY) {\\n            revert OverUnderAllowedAmt();\\n        }\\n        buyAndLockTokens(msg.sender, _amt, _preferUSDC);\\n    }\\n\\n    function allocateTokens(uint256 _amt, bool _preferUSDC) external override nonReentrant {\\n        if (wl[msg.sender] != 1) {\\n            revert CantBuy();\\n        }\\n        if (_amt < MIN_TOKENS_TO_BUY) {\\n            revert OverUnderAllowedAmt();\\n        }\\n        addressToBoughtAmt[msg.sender] = addressToBoughtAmt[msg.sender] + _amt;\\n        if (addressToBoughtAmt[msg.sender] > MAX_TOKENS_TO_BUY) {\\n            revert OverUnderAllowedAmt();\\n        }\\n        nonWeb3UserAllocate(msg.sender, _amt, _preferUSDC);\\n    }\\n}\\n\",\"keccak256\":\"0xb0397bb4ce2544e1fd14b57ca97720c80d51eba745805ee65151c878f8032f1e\",\"license\":\"MIT\"},\"contracts/DTECTokenSale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {ITokenLock} from \\\"./interfaces/ITokenLock.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nabstract contract DTECTokenSale is Ownable, Pausable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public salePrice;\\n\\n    mapping(address => uint8) private mods;\\n    mapping(address => uint256) public allocations;\\n    uint256 totalAllocated;\\n\\n    address public lockerAddress;\\n    address public dtecTokenAddress;\\n    address private paymentReceiver;\\n    uint256 public immediateReleaseRate;\\n    address public USDC = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\\n    address public USDT = 0xc2132D05D31c914a87C6611C10748AEb04B58e8F;\\n\\n    uint256 public amountSold;\\n\\n    error CantBuy();\\n\\n    constructor(address _receiver, address _dtecAddress, address _lockerAddress) {\\n        paymentReceiver = _receiver;\\n        dtecTokenAddress = _dtecAddress;\\n        lockerAddress = _lockerAddress;\\n        mods[msg.sender] = 1; // Add owner as mod\\n        _pause();\\n    }\\n\\n    function addMods(address[] calldata _mods) external onlyOwner {\\n        for (uint256 i = 0; i < _mods.length; i++) {\\n            mods[_mods[i]] = 1;\\n        }\\n    }\\n\\n    function isMod(address _adr) internal view returns (bool) {\\n        return mods[_adr] == 1;\\n    }\\n\\n    function togglePause() external onlyOwner {\\n        if (paused()) {\\n            _unpause();\\n        } else {\\n            _pause();\\n        }\\n    }\\n\\n    // For testing purposes only\\n    function setStableAddresses(address _usdc, address _usdt) external onlyOwner {\\n        USDC = _usdc;\\n        USDT = _usdt;\\n    }\\n\\n    function setImmediateReleaseRate(uint256 _rate) public onlyOwner {\\n        immediateReleaseRate = _rate;\\n    }\\n\\n    function setPaymentReceiver(address _receiver) external onlyOwner {\\n        paymentReceiver = _receiver;\\n    }\\n\\n    function setSalePrice(uint256 _price) public onlyOwner {\\n        salePrice = _price;\\n    }\\n\\n    function pullTokens(uint256 _amt) public onlyOwner {\\n        IERC20 dtec = IERC20(dtecTokenAddress);\\n        dtec.transfer(owner(), _amt);\\n    }\\n\\n    function getBuyCost(uint256 _amt) external view returns (uint256) {\\n        return _amt * salePrice;\\n    }\\n\\n    function calculateReleaseAmounts(uint256 amtInWei) internal view returns (uint256, uint256) {\\n        uint256 lockAmount = amtInWei;\\n        uint256 releaseAmount = 0;\\n        if (immediateReleaseRate > 0) {\\n            releaseAmount = amtInWei * immediateReleaseRate / 10000;\\n            lockAmount = amtInWei - releaseAmount;\\n        }\\n        return (releaseAmount, lockAmount);\\n    }\\n\\n    function transferFundsAndCalculateReleaseAmounts(address _user, uint256 _amt, bool _preferUSDC) internal returns (uint256, uint256, uint256) {\\n        if (_amt == 0) {\\n            revert CantBuy();\\n        }\\n        uint256 amtInWei = _amt * 1 ether;\\n        uint256 availableBalance = IERC20(dtecTokenAddress).balanceOf(address(this)) - totalAllocated;\\n        if (amtInWei > availableBalance) {\\n            revert CantBuy();\\n        }\\n        // _amt is in ether\\n        IERC20 stable = IERC20(_preferUSDC ? USDC : USDT);\\n        uint256 stablePaymentAmount = _amt * salePrice; // Sale price is in wei so do not convert this\\n        stable.safeTransferFrom(_user, paymentReceiver, stablePaymentAmount);\\n        (uint256 releaseAmount, uint256 lockAmount) = calculateReleaseAmounts(amtInWei);\\n        return (releaseAmount, lockAmount, amtInWei);\\n    }\\n\\n    function buyAndLockTokens(address _user, uint256 _amt, bool _preferUSDC) internal whenNotPaused {\\n        (uint256 releaseAmount, uint256 lockAmount, ) =\\n            transferFundsAndCalculateReleaseAmounts(_user, _amt, _preferUSDC);\\n        IERC20 dtec = IERC20(dtecTokenAddress);\\n        dtec.transfer(lockerAddress, lockAmount);\\n        ITokenLock tokenLock = ITokenLock(lockerAddress);\\n        tokenLock.lockTokens(_user, lockAmount);\\n        // Release to user\\n        if (releaseAmount > 0) {\\n            dtec.transfer(_user, releaseAmount);\\n        }\\n        amountSold += _amt;\\n    }\\n\\n    function nonWeb3UserAllocate(address _user, uint256 _amt, bool _preferUSDC) internal whenNotPaused {\\n        (, , uint256 amtInWei) =\\n            transferFundsAndCalculateReleaseAmounts(_user, _amt, _preferUSDC);\\n        allocations[_user] += amtInWei;\\n        totalAllocated += amtInWei;\\n        amountSold += _amt;\\n    }\\n\\n    function claimAllocation(address _to) external {\\n        uint256 allocation = allocations[msg.sender];\\n        if (allocation == 0) {\\n            revert CantBuy();\\n        }\\n        (uint256 releaseAmount, uint256 lockAmount) = calculateReleaseAmounts(allocation);\\n        allocations[msg.sender] = 0;\\n        totalAllocated -= allocation;\\n        IERC20 dtec = IERC20(dtecTokenAddress);\\n        dtec.transfer(lockerAddress, lockAmount);\\n        ITokenLock tokenLock = ITokenLock(lockerAddress);\\n        tokenLock.lockTokens(_to, lockAmount);\\n        // Release to user\\n        if (releaseAmount > 0) {\\n            dtec.transfer(_to, releaseAmount);\\n        }\\n    }\\n\\n    function buyTokens(uint256 _amt, bool _preferUSDC) external virtual;\\n    function allocateTokens(uint256 _amt, bool _preferUSDC) external virtual;\\n}\\n\",\"keccak256\":\"0xbc127606d59f822d84739eba84753e1139b816e971e3664e61f05b55243ac66c\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenLock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface ITokenLock {\\n    function claim() external;\\n    function lockTokens(address _user, uint256 _amt) external;\\n    function getClaimable(address _user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0cd167f932fcf478ad4ae3824f759b670cd2ebca4312543647b14546f42af4b4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052732791bca1f2de4661ed88a30c99a7a9449aa84174600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073c2132d05d31c914a87c6611c10748aeb04b58e8f600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550348015620000bb57600080fd5b5060405162002ec038038062002ec08339818101604052810190620000e191906200058b565b82828262000104620000f86200028760201b60201c565b6200028f60201b60201c565b60008060146101000a81548160ff0219169083151502179055506001808190555082600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff160217905550620002516200035360201b60201c565b5050506200026660c8620003c860201b60201c565b6200027e66f8b0a10e470000620003e260201b60201c565b5050506200070a565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b62000363620003fc60201b60201c565b6001600060146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258620003af6200028760201b60201c565b604051620003be9190620005f8565b60405180910390a1565b620003d86200045160201b60201c565b8060098190555050565b620003f26200045160201b60201c565b8060028190555050565b6200040c620004e260201b60201c565b156200044f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004469062000676565b60405180910390fd5b565b620004616200028760201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1662000487620004f860201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614620004e0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004d790620006e8565b60405180910390fd5b565b60008060149054906101000a900460ff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620005538262000526565b9050919050565b620005658162000546565b81146200057157600080fd5b50565b60008151905062000585816200055a565b92915050565b600080600060608486031215620005a757620005a662000521565b5b6000620005b78682870162000574565b9350506020620005ca8682870162000574565b9250506040620005dd8682870162000574565b9150509250925092565b620005f28162000546565b82525050565b60006020820190506200060f6000830184620005e7565b92915050565b600082825260208201905092915050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b60006200065e60108362000615565b91506200066b8262000626565b602082019050919050565b6000602082019050818103600083015262000691816200064f565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000620006d060208362000615565b9150620006dd8262000698565b602082019050919050565b600060208201905081810360008301526200070381620006c1565b9050919050565b6127a6806200071a6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806365ebf99a116100f9578063ac1ac54711610097578063c4ae316811610071578063c4ae3168146104b9578063c54e44eb146104c3578063f2fde38b146104e1578063f51f96dd146104fd576101c4565b8063ac1ac54714610451578063aedd70d41461046d578063bee04dd714610489576101c4565b80637e0db6cc116100d35780637e0db6cc146103dd57806389a30271146103f95780638a61d8a5146104175780638da5cb5b14610433576101c4565b806365ebf99a1461039b578063715018a6146103b757806371ce6b4a146103c1576101c4565b8063498ea0c01161016657806352a16bb01161014057806352a16bb01461031357806352a9039c146103315780635c975abb146103615780635ef684711461037f576101c4565b8063498ea0c0146102bb5780634b157f21146102d957806350a10405146102f5576101c4565b80631d4562eb116101a25780631d4562eb146102335780632fee9e7e14610251578063356911e7146102815780633675f29b1461029d576101c4565b8063040483cd146101c95780630ae66820146101e75780631919fed714610217575b600080fd5b6101d161051b565b6040516101de9190611cfc565b60405180910390f35b61020160048036038101906101fc9190611d4d565b610522565b60405161020e9190611cfc565b60405180910390f35b610231600480360381019061022c9190611d4d565b610539565b005b61023b61054b565b6040516102489190611cfc565b60405180910390f35b61026b60048036038101906102669190611dd8565b610552565b6040516102789190611e21565b60405180910390f35b61029b60048036038101906102969190611ea1565b610572565b005b6102a5610620565b6040516102b29190611efd565b60405180910390f35b6102c3610646565b6040516102d09190611efd565b60405180910390f35b6102f360048036038101906102ee9190611f50565b61066c565b005b6102fd61085b565b60405161030a9190611cfc565b60405180910390f35b61031b610861565b6040516103289190611cfc565b60405180910390f35b61034b60048036038101906103469190611dd8565b610867565b6040516103589190611cfc565b60405180910390f35b61036961087f565b6040516103769190611f9f565b60405180910390f35b61039960048036038101906103949190611dd8565b610895565b005b6103b560048036038101906103b09190611dd8565b610b6e565b005b6103bf610bba565b005b6103db60048036038101906103d69190611ea1565b610bce565b005b6103f760048036038101906103f29190611d4d565b610cb3565b005b610401610d6c565b60405161040e9190611efd565b60405180910390f35b610431600480360381019061042c9190611d4d565b610d92565b005b61043b610da4565b6040516104489190611efd565b60405180910390f35b61046b60048036038101906104669190611f50565b610dcd565b005b61048760048036038101906104829190611fba565b610fbc565b005b6104a3600480360381019061049e9190611dd8565b61104a565b6040516104b09190611cfc565b60405180910390f35b6104c1611062565b005b6104cb61108f565b6040516104d89190611efd565b60405180910390f35b6104fb60048036038101906104f69190611dd8565b6110b5565b005b610505611138565b6040516105129190611cfc565b60405180910390f35b6215cc5c81565b6000600254826105329190612029565b9050919050565b61054161113e565b8060028190555050565b6201170481565b600d6020528060005260406000206000915054906101000a900460ff1681565b61057a61113e565b60005b8282905081101561061b576001600360008585858181106105a1576105a061206b565b5b90506020020160208101906105b69190611dd8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff16021790555080806106139061209a565b91505061057d565b505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6106746111bc565b6001600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16146106fd576040517f1ab7ae5600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6201170482101561073a576040517fce817bad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461078591906120e2565b600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506215cc5c600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115610844576040517fce817bad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61084f33838361120b565b6108576112b2565b5050565b60095481565b600c5481565b60046020528060005260406000206000915090505481565b60008060149054906101000a900460ff16905090565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008103610913576040517f1ab7ae5600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008061091f836112bb565b915091506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550826005600082825461097a9190612116565b925050819055506000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401610a0592919061214a565b6020604051808303816000875af1158015610a24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a489190612188565b506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663b1c2558687856040518363ffffffff1660e01b8152600401610aab92919061214a565b600060405180830381600087803b158015610ac557600080fd5b505af1158015610ad9573d6000803e3d6000fd5b505050506000841115610b66578173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb87866040518363ffffffff1660e01b8152600401610b2192919061214a565b6020604051808303816000875af1158015610b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b649190612188565b505b505050505050565b610b7661113e565b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610bc261113e565b610bcc6000611308565b565b610bd7336113cc565b610c0d576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b82829050811015610cae576001600d6000858585818110610c3457610c3361206b565b5b9050602002016020810190610c499190611dd8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508080610ca69061209a565b915050610c10565b505050565b610cbb61113e565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610d06610da4565b846040518363ffffffff1660e01b8152600401610d2492919061214a565b6020604051808303816000875af1158015610d43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d679190612188565b505050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610d9a61113e565b8060098190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610dd56111bc565b6001600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1614610e5e576040517f1ab7ae5600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b62011704821015610e9b576040517fce817bad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ee691906120e2565b600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506215cc5c600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115610fa5576040517fce817bad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610fb0338383611428565b610fb86112b2565b5050565b610fc461113e565b81600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600e6020528060005260406000206000915090505481565b61106a61113e565b61107261087f565b156110845761107f61164a565b61108d565b61108c6116ac565b5b565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6110bd61113e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361112c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112390612238565b60405180910390fd5b61113581611308565b50565b60025481565b61114661170f565b73ffffffffffffffffffffffffffffffffffffffff16611164610da4565b73ffffffffffffffffffffffffffffffffffffffff16146111ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b1906122a4565b60405180910390fd5b565b600260015403611201576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f890612310565b60405180910390fd5b6002600181905550565b611213611717565b6000611220848484611761565b9250505080600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461127391906120e2565b92505081905550806005600082825461128c91906120e2565b9250508190555082600c60008282546112a591906120e2565b9250508190555050505050565b60018081905550565b600080600083905060008060095411156112fb57612710600954866112e09190612029565b6112ea919061235f565b905080856112f89190612116565b91505b8082935093505050915091565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16149050919050565b611430611717565b60008061143e858585611761565b50915091506000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b81526004016114c792919061214a565b6020604051808303816000875af11580156114e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150a9190612188565b506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663b1c2558688856040518363ffffffff1660e01b815260040161156d92919061214a565b600060405180830381600087803b15801561158757600080fd5b505af115801561159b573d6000803e3d6000fd5b505050506000841115611628578173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88866040518363ffffffff1660e01b81526004016115e392919061214a565b6020604051808303816000875af1158015611602573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116269190612188565b505b85600c600082825461163a91906120e2565b9250508190555050505050505050565b61165261197c565b60008060146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61169561170f565b6040516116a29190611efd565b60405180910390a1565b6116b4611717565b6001600060146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116f861170f565b6040516117059190611efd565b60405180910390a1565b600033905090565b61171f61087f565b1561175f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611756906123dc565b60405180910390fd5b565b600080600080850361179f576040517f1ab7ae5600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000670de0b6b3a7640000866117b59190612029565b90506000600554600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016118179190611efd565b602060405180830381865afa158015611834573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118589190612411565b6118629190612116565b90508082111561189e576040517f1ab7ae5600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000866118cd57600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166118f1565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b90506000600254896119039190612029565b90506119548a600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838573ffffffffffffffffffffffffffffffffffffffff166119c5909392919063ffffffff16565b600080611960866112bb565b9150915081818798509850985050505050505093509350939050565b61198461087f565b6119c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ba9061248a565b60405180910390fd5b565b611a48846323b872dd60e01b8585856040516024016119e6939291906124aa565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611a4e565b50505050565b6000611ab0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611b169092919063ffffffff16565b9050600081511480611ad2575080806020019051810190611ad19190612188565b5b611b11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0890612553565b60405180910390fd5b505050565b6060611b258484600085611b2e565b90509392505050565b606082471015611b73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6a906125e5565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611b9c9190612676565b60006040518083038185875af1925050503d8060008114611bd9576040519150601f19603f3d011682016040523d82523d6000602084013e611bde565b606091505b5091509150611bef87838387611bfb565b92505050949350505050565b60608315611c5d576000835103611c5557611c1585611c70565b611c54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4b906126d9565b60405180910390fd5b5b829050611c68565b611c678383611c93565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115611ca65781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cda919061274e565b60405180910390fd5b6000819050919050565b611cf681611ce3565b82525050565b6000602082019050611d116000830184611ced565b92915050565b600080fd5b600080fd5b611d2a81611ce3565b8114611d3557600080fd5b50565b600081359050611d4781611d21565b92915050565b600060208284031215611d6357611d62611d17565b5b6000611d7184828501611d38565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611da582611d7a565b9050919050565b611db581611d9a565b8114611dc057600080fd5b50565b600081359050611dd281611dac565b92915050565b600060208284031215611dee57611ded611d17565b5b6000611dfc84828501611dc3565b91505092915050565b600060ff82169050919050565b611e1b81611e05565b82525050565b6000602082019050611e366000830184611e12565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611e6157611e60611e3c565b5b8235905067ffffffffffffffff811115611e7e57611e7d611e41565b5b602083019150836020820283011115611e9a57611e99611e46565b5b9250929050565b60008060208385031215611eb857611eb7611d17565b5b600083013567ffffffffffffffff811115611ed657611ed5611d1c565b5b611ee285828601611e4b565b92509250509250929050565b611ef781611d9a565b82525050565b6000602082019050611f126000830184611eee565b92915050565b60008115159050919050565b611f2d81611f18565b8114611f3857600080fd5b50565b600081359050611f4a81611f24565b92915050565b60008060408385031215611f6757611f66611d17565b5b6000611f7585828601611d38565b9250506020611f8685828601611f3b565b9150509250929050565b611f9981611f18565b82525050565b6000602082019050611fb46000830184611f90565b92915050565b60008060408385031215611fd157611fd0611d17565b5b6000611fdf85828601611dc3565b9250506020611ff085828601611dc3565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061203482611ce3565b915061203f83611ce3565b925082820261204d81611ce3565b9150828204841483151761206457612063611ffa565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006120a582611ce3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036120d7576120d6611ffa565b5b600182019050919050565b60006120ed82611ce3565b91506120f883611ce3565b92508282019050808211156121105761210f611ffa565b5b92915050565b600061212182611ce3565b915061212c83611ce3565b925082820390508181111561214457612143611ffa565b5b92915050565b600060408201905061215f6000830185611eee565b61216c6020830184611ced565b9392505050565b60008151905061218281611f24565b92915050565b60006020828403121561219e5761219d611d17565b5b60006121ac84828501612173565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006122226026836121b5565b915061222d826121c6565b604082019050919050565b6000602082019050818103600083015261225181612215565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061228e6020836121b5565b915061229982612258565b602082019050919050565b600060208201905081810360008301526122bd81612281565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006122fa601f836121b5565b9150612305826122c4565b602082019050919050565b60006020820190508181036000830152612329816122ed565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061236a82611ce3565b915061237583611ce3565b92508261238557612384612330565b5b828204905092915050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b60006123c66010836121b5565b91506123d182612390565b602082019050919050565b600060208201905081810360008301526123f5816123b9565b9050919050565b60008151905061240b81611d21565b92915050565b60006020828403121561242757612426611d17565b5b6000612435848285016123fc565b91505092915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b60006124746014836121b5565b915061247f8261243e565b602082019050919050565b600060208201905081810360008301526124a381612467565b9050919050565b60006060820190506124bf6000830186611eee565b6124cc6020830185611eee565b6124d96040830184611ced565b949350505050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061253d602a836121b5565b9150612548826124e1565b604082019050919050565b6000602082019050818103600083015261256c81612530565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006125cf6026836121b5565b91506125da82612573565b604082019050919050565b600060208201905081810360008301526125fe816125c2565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561263957808201518184015260208101905061261e565b60008484015250505050565b600061265082612605565b61265a8185612610565b935061266a81856020860161261b565b80840191505092915050565b60006126828284612645565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006126c3601d836121b5565b91506126ce8261268d565b602082019050919050565b600060208201905081810360008301526126f2816126b6565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b6000612720826126f9565b61272a81856121b5565b935061273a81856020860161261b565b61274381612704565b840191505092915050565b600060208201905081810360008301526127688184612715565b90509291505056fea26469706673582212209f25170e7179900c1a3d11f5c2d58937227fc0f57bf59ba1b0ed3465f873666a64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c806365ebf99a116100f9578063ac1ac54711610097578063c4ae316811610071578063c4ae3168146104b9578063c54e44eb146104c3578063f2fde38b146104e1578063f51f96dd146104fd576101c4565b8063ac1ac54714610451578063aedd70d41461046d578063bee04dd714610489576101c4565b80637e0db6cc116100d35780637e0db6cc146103dd57806389a30271146103f95780638a61d8a5146104175780638da5cb5b14610433576101c4565b806365ebf99a1461039b578063715018a6146103b757806371ce6b4a146103c1576101c4565b8063498ea0c01161016657806352a16bb01161014057806352a16bb01461031357806352a9039c146103315780635c975abb146103615780635ef684711461037f576101c4565b8063498ea0c0146102bb5780634b157f21146102d957806350a10405146102f5576101c4565b80631d4562eb116101a25780631d4562eb146102335780632fee9e7e14610251578063356911e7146102815780633675f29b1461029d576101c4565b8063040483cd146101c95780630ae66820146101e75780631919fed714610217575b600080fd5b6101d161051b565b6040516101de9190611cfc565b60405180910390f35b61020160048036038101906101fc9190611d4d565b610522565b60405161020e9190611cfc565b60405180910390f35b610231600480360381019061022c9190611d4d565b610539565b005b61023b61054b565b6040516102489190611cfc565b60405180910390f35b61026b60048036038101906102669190611dd8565b610552565b6040516102789190611e21565b60405180910390f35b61029b60048036038101906102969190611ea1565b610572565b005b6102a5610620565b6040516102b29190611efd565b60405180910390f35b6102c3610646565b6040516102d09190611efd565b60405180910390f35b6102f360048036038101906102ee9190611f50565b61066c565b005b6102fd61085b565b60405161030a9190611cfc565b60405180910390f35b61031b610861565b6040516103289190611cfc565b60405180910390f35b61034b60048036038101906103469190611dd8565b610867565b6040516103589190611cfc565b60405180910390f35b61036961087f565b6040516103769190611f9f565b60405180910390f35b61039960048036038101906103949190611dd8565b610895565b005b6103b560048036038101906103b09190611dd8565b610b6e565b005b6103bf610bba565b005b6103db60048036038101906103d69190611ea1565b610bce565b005b6103f760048036038101906103f29190611d4d565b610cb3565b005b610401610d6c565b60405161040e9190611efd565b60405180910390f35b610431600480360381019061042c9190611d4d565b610d92565b005b61043b610da4565b6040516104489190611efd565b60405180910390f35b61046b60048036038101906104669190611f50565b610dcd565b005b61048760048036038101906104829190611fba565b610fbc565b005b6104a3600480360381019061049e9190611dd8565b61104a565b6040516104b09190611cfc565b60405180910390f35b6104c1611062565b005b6104cb61108f565b6040516104d89190611efd565b60405180910390f35b6104fb60048036038101906104f69190611dd8565b6110b5565b005b610505611138565b6040516105129190611cfc565b60405180910390f35b6215cc5c81565b6000600254826105329190612029565b9050919050565b61054161113e565b8060028190555050565b6201170481565b600d6020528060005260406000206000915054906101000a900460ff1681565b61057a61113e565b60005b8282905081101561061b576001600360008585858181106105a1576105a061206b565b5b90506020020160208101906105b69190611dd8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff16021790555080806106139061209a565b91505061057d565b505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6106746111bc565b6001600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16146106fd576040517f1ab7ae5600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6201170482101561073a576040517fce817bad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461078591906120e2565b600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506215cc5c600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115610844576040517fce817bad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61084f33838361120b565b6108576112b2565b5050565b60095481565b600c5481565b60046020528060005260406000206000915090505481565b60008060149054906101000a900460ff16905090565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008103610913576040517f1ab7ae5600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008061091f836112bb565b915091506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550826005600082825461097a9190612116565b925050819055506000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401610a0592919061214a565b6020604051808303816000875af1158015610a24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a489190612188565b506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663b1c2558687856040518363ffffffff1660e01b8152600401610aab92919061214a565b600060405180830381600087803b158015610ac557600080fd5b505af1158015610ad9573d6000803e3d6000fd5b505050506000841115610b66578173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb87866040518363ffffffff1660e01b8152600401610b2192919061214a565b6020604051808303816000875af1158015610b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b649190612188565b505b505050505050565b610b7661113e565b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610bc261113e565b610bcc6000611308565b565b610bd7336113cc565b610c0d576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b82829050811015610cae576001600d6000858585818110610c3457610c3361206b565b5b9050602002016020810190610c499190611dd8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055508080610ca69061209a565b915050610c10565b505050565b610cbb61113e565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610d06610da4565b846040518363ffffffff1660e01b8152600401610d2492919061214a565b6020604051808303816000875af1158015610d43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d679190612188565b505050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610d9a61113e565b8060098190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610dd56111bc565b6001600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff1614610e5e576040517f1ab7ae5600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b62011704821015610e9b576040517fce817bad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ee691906120e2565b600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506215cc5c600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115610fa5576040517fce817bad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610fb0338383611428565b610fb86112b2565b5050565b610fc461113e565b81600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600e6020528060005260406000206000915090505481565b61106a61113e565b61107261087f565b156110845761107f61164a565b61108d565b61108c6116ac565b5b565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6110bd61113e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361112c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112390612238565b60405180910390fd5b61113581611308565b50565b60025481565b61114661170f565b73ffffffffffffffffffffffffffffffffffffffff16611164610da4565b73ffffffffffffffffffffffffffffffffffffffff16146111ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b1906122a4565b60405180910390fd5b565b600260015403611201576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f890612310565b60405180910390fd5b6002600181905550565b611213611717565b6000611220848484611761565b9250505080600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461127391906120e2565b92505081905550806005600082825461128c91906120e2565b9250508190555082600c60008282546112a591906120e2565b9250508190555050505050565b60018081905550565b600080600083905060008060095411156112fb57612710600954866112e09190612029565b6112ea919061235f565b905080856112f89190612116565b91505b8082935093505050915091565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1660ff16149050919050565b611430611717565b60008061143e858585611761565b50915091506000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b81526004016114c792919061214a565b6020604051808303816000875af11580156114e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150a9190612188565b506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663b1c2558688856040518363ffffffff1660e01b815260040161156d92919061214a565b600060405180830381600087803b15801561158757600080fd5b505af115801561159b573d6000803e3d6000fd5b505050506000841115611628578173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88866040518363ffffffff1660e01b81526004016115e392919061214a565b6020604051808303816000875af1158015611602573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116269190612188565b505b85600c600082825461163a91906120e2565b9250508190555050505050505050565b61165261197c565b60008060146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61169561170f565b6040516116a29190611efd565b60405180910390a1565b6116b4611717565b6001600060146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116f861170f565b6040516117059190611efd565b60405180910390a1565b600033905090565b61171f61087f565b1561175f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611756906123dc565b60405180910390fd5b565b600080600080850361179f576040517f1ab7ae5600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000670de0b6b3a7640000866117b59190612029565b90506000600554600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016118179190611efd565b602060405180830381865afa158015611834573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118589190612411565b6118629190612116565b90508082111561189e576040517f1ab7ae5600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000866118cd57600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166118f1565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b90506000600254896119039190612029565b90506119548a600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838573ffffffffffffffffffffffffffffffffffffffff166119c5909392919063ffffffff16565b600080611960866112bb565b9150915081818798509850985050505050505093509350939050565b61198461087f565b6119c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ba9061248a565b60405180910390fd5b565b611a48846323b872dd60e01b8585856040516024016119e6939291906124aa565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611a4e565b50505050565b6000611ab0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611b169092919063ffffffff16565b9050600081511480611ad2575080806020019051810190611ad19190612188565b5b611b11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0890612553565b60405180910390fd5b505050565b6060611b258484600085611b2e565b90509392505050565b606082471015611b73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6a906125e5565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611b9c9190612676565b60006040518083038185875af1925050503d8060008114611bd9576040519150601f19603f3d011682016040523d82523d6000602084013e611bde565b606091505b5091509150611bef87838387611bfb565b92505050949350505050565b60608315611c5d576000835103611c5557611c1585611c70565b611c54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4b906126d9565b60405180910390fd5b5b829050611c68565b611c678383611c93565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115611ca65781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cda919061274e565b60405180910390fd5b6000819050919050565b611cf681611ce3565b82525050565b6000602082019050611d116000830184611ced565b92915050565b600080fd5b600080fd5b611d2a81611ce3565b8114611d3557600080fd5b50565b600081359050611d4781611d21565b92915050565b600060208284031215611d6357611d62611d17565b5b6000611d7184828501611d38565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611da582611d7a565b9050919050565b611db581611d9a565b8114611dc057600080fd5b50565b600081359050611dd281611dac565b92915050565b600060208284031215611dee57611ded611d17565b5b6000611dfc84828501611dc3565b91505092915050565b600060ff82169050919050565b611e1b81611e05565b82525050565b6000602082019050611e366000830184611e12565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611e6157611e60611e3c565b5b8235905067ffffffffffffffff811115611e7e57611e7d611e41565b5b602083019150836020820283011115611e9a57611e99611e46565b5b9250929050565b60008060208385031215611eb857611eb7611d17565b5b600083013567ffffffffffffffff811115611ed657611ed5611d1c565b5b611ee285828601611e4b565b92509250509250929050565b611ef781611d9a565b82525050565b6000602082019050611f126000830184611eee565b92915050565b60008115159050919050565b611f2d81611f18565b8114611f3857600080fd5b50565b600081359050611f4a81611f24565b92915050565b60008060408385031215611f6757611f66611d17565b5b6000611f7585828601611d38565b9250506020611f8685828601611f3b565b9150509250929050565b611f9981611f18565b82525050565b6000602082019050611fb46000830184611f90565b92915050565b60008060408385031215611fd157611fd0611d17565b5b6000611fdf85828601611dc3565b9250506020611ff085828601611dc3565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061203482611ce3565b915061203f83611ce3565b925082820261204d81611ce3565b9150828204841483151761206457612063611ffa565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006120a582611ce3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036120d7576120d6611ffa565b5b600182019050919050565b60006120ed82611ce3565b91506120f883611ce3565b92508282019050808211156121105761210f611ffa565b5b92915050565b600061212182611ce3565b915061212c83611ce3565b925082820390508181111561214457612143611ffa565b5b92915050565b600060408201905061215f6000830185611eee565b61216c6020830184611ced565b9392505050565b60008151905061218281611f24565b92915050565b60006020828403121561219e5761219d611d17565b5b60006121ac84828501612173565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006122226026836121b5565b915061222d826121c6565b604082019050919050565b6000602082019050818103600083015261225181612215565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061228e6020836121b5565b915061229982612258565b602082019050919050565b600060208201905081810360008301526122bd81612281565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006122fa601f836121b5565b9150612305826122c4565b602082019050919050565b60006020820190508181036000830152612329816122ed565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061236a82611ce3565b915061237583611ce3565b92508261238557612384612330565b5b828204905092915050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b60006123c66010836121b5565b91506123d182612390565b602082019050919050565b600060208201905081810360008301526123f5816123b9565b9050919050565b60008151905061240b81611d21565b92915050565b60006020828403121561242757612426611d17565b5b6000612435848285016123fc565b91505092915050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b60006124746014836121b5565b915061247f8261243e565b602082019050919050565b600060208201905081810360008301526124a381612467565b9050919050565b60006060820190506124bf6000830186611eee565b6124cc6020830185611eee565b6124d96040830184611ced565b949350505050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061253d602a836121b5565b9150612548826124e1565b604082019050919050565b6000602082019050818103600083015261256c81612530565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006125cf6026836121b5565b91506125da82612573565b604082019050919050565b600060208201905081810360008301526125fe816125c2565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561263957808201518184015260208101905061261e565b60008484015250505050565b600061265082612605565b61265a8185612610565b935061266a81856020860161261b565b80840191505092915050565b60006126828284612645565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006126c3601d836121b5565b91506126ce8261268d565b602082019050919050565b600060208201905081810360008301526126f2816126b6565b9050919050565b600081519050919050565b6000601f19601f8301169050919050565b6000612720826126f9565b61272a81856121b5565b935061273a81856020860161261b565b61274381612704565b840191505092915050565b600060208201905081810360008301526127688184612715565b90509291505056fea26469706673582212209f25170e7179900c1a3d11f5c2d58937227fc0f57bf59ba1b0ed3465f873666a64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/DTECPrivateSale.sol:DTECPrivateSale",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/DTECPrivateSale.sol:DTECPrivateSale",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 231,
        "contract": "contracts/DTECPrivateSale.sol:DTECPrivateSale",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1638,
        "contract": "contracts/DTECPrivateSale.sol:DTECPrivateSale",
        "label": "salePrice",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1642,
        "contract": "contracts/DTECPrivateSale.sol:DTECPrivateSale",
        "label": "mods",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint8)"
      },
      {
        "astId": 1646,
        "contract": "contracts/DTECPrivateSale.sol:DTECPrivateSale",
        "label": "allocations",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1648,
        "contract": "contracts/DTECPrivateSale.sol:DTECPrivateSale",
        "label": "totalAllocated",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1650,
        "contract": "contracts/DTECPrivateSale.sol:DTECPrivateSale",
        "label": "lockerAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1652,
        "contract": "contracts/DTECPrivateSale.sol:DTECPrivateSale",
        "label": "dtecTokenAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1654,
        "contract": "contracts/DTECPrivateSale.sol:DTECPrivateSale",
        "label": "paymentReceiver",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 1656,
        "contract": "contracts/DTECPrivateSale.sol:DTECPrivateSale",
        "label": "immediateReleaseRate",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1659,
        "contract": "contracts/DTECPrivateSale.sol:DTECPrivateSale",
        "label": "USDC",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 1662,
        "contract": "contracts/DTECPrivateSale.sol:DTECPrivateSale",
        "label": "USDT",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 1664,
        "contract": "contracts/DTECPrivateSale.sol:DTECPrivateSale",
        "label": "amountSold",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1283,
        "contract": "contracts/DTECPrivateSale.sol:DTECPrivateSale",
        "label": "wl",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint8)"
      },
      {
        "astId": 1287,
        "contract": "contracts/DTECPrivateSale.sol:DTECPrivateSale",
        "label": "addressToBoughtAmt",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}